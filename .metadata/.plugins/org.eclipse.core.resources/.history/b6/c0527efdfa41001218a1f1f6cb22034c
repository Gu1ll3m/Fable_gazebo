#include <pr2_controller_interface/controller.h>
#include <pluginlib/class_list_macros.h>
#include <pr2_mechanism_model/joint.h>
#include <yaml-cpp/yaml.h>
#include <map>
#include <fstream>
#include <sstream>
#include <sys/time.h>
#include <time.h>
#include <err.h>
#include <stdio.h>

class joint_controller: public controller::Controller
{
public:
  virtual bool starting();
  virtual void update(void);
  virtual bool stopping();
  virtual bool init(pr2_mechanism::RobotState *robot, const ros::NodeHandle &n);
};


bool FableController::
starting()
{
  fprintf(stderr, "FableController::starting()\n");
  return true;
}


void FableController::
update(void)
{
}


bool FableController::
stopping()
{
  fprintf(stderr, "FableController::stopping()\n");
  return true;
}


bool FableController::
init(pr2_mechanism::RobotState *robot, const ros::NodeHandle &n)
{
  fprintf(stderr, "FableController::init()\n");
  
  typedef std::vector<pr2_mechanism::Joint*> jointvec_t;
  jointvec_t const & jvec(robot->model_->joints_);
  for (jointvec_t::const_iterator ij(jvec.begin()); ij != jvec.end(); ++ij) {
    fprintf(stderr, "  n: %s\tt: %d\tmin: %g\tmax: %g\n",
	       (*ij)->name_.c_str(), (*ij)->type_, (*ij)->joint_limit_min_, (*ij)->joint_limit_max_);
  }
  
  return true;
}


PLUGINLIB_REGISTER_CLASS (FableController, FableController, controller::Controller)
